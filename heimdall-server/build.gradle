plugins {
    id 'org.asciidoctor.convert' version '1.5.3'
    id 'org.springframework.boot' version '2.2.0.M3'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.31'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.3.31'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin'
apply plugin: 'kotlin-jpa'
apply plugin: 'kotlin-allopen'

sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    set('snippetsDir', file('build/generated-snippets'))
}

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation project(':heimdall-events')
    implementation project(':heimdall-report-api')
    implementation project(':heimdall-front')

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'com.github.salomonbrys.kotson:kotson:2.5.0'

    runtimeOnly 'com.h2database:h2'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
        exclude module: 'mockito-core'
    }
    testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc') {
        exclude module: 'junit'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'com.ninja-squad:springmockk:1.1.2'
    testImplementation 'io.mockk:mockk:1.9.3'

    testRuntime 'org.junit.platform:junit-platform-launcher'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine'
    testRuntime 'org.junit.vintage:junit-vintage-engine'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir

    sourceDir 'src/main/asciidoc'
    attributes 'snippets': file(snippetsDir)

    dependsOn test
}

allOpen {
    annotation 'javax.persistence.Entity'
    annotation 'javax.persistence.Embeddable'
    annotation 'javax.persistence.MappedSuperclass'
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}